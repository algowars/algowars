import { Inject } from '@nestjs/common';
import { EntityId, writeConnection } from 'lib/database.module';
import { {{properCase name}}, {{properCase name}}Properties } from 'src/{{ name }}/domain/{{ name }}';
import { {{properCase name}}Factory } from 'src/{{ name }}/domain/{{ name }}-factory';
import { {{properCase name}}Repository } from 'src/{{ name }}/domain/{{ name }}-repository';
import { {{properCase name}}Entity } from '../entities/{{ name }}.entity';

export class {{properCase name}}RepositoryImplementation implements {{properCase name}}Repository {
  @Inject() private readonly {{ name }}Factory: {{properCase name}}Factory;

  async newId(): Promise<string> {
    return new EntityId().toString();
  }

  async save(data: {{properCase name}} | {{properCase name}}[]): Promise<void> {
    const models = Array.isArray(data) ? data : [data];
    const entities = models.map((model) => this.modelToEntity(model));
    await writeConnection.manager.getRepository({{properCase name}}Entity).save(entities);
  }

  async findById(id: string): Promise<{{properCase name}} | null> {
    const entity = await writeConnection.manager
      .getRepository({{properCase name}}Entity)
      .findOneBy({ id });
    return entity ? this.entityToModel(entity) : null;
  }

  private modelToEntity(model: {{properCase name}}): {{properCase name}}Entity {
    const properties = JSON.parse(JSON.stringify(model)) as {{properCase name}}Properties;

    return properties;
  }

  private entityToModel(entity: {{properCase name}}Entity): {{properCase name}} {
    return this.problemFactory.createFromEntity(entity);
  }
}
